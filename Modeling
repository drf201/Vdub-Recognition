{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "//anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import sys\n",
    "import cv2\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten, Dropout, Activation, Conv2D, MaxPooling2D\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "import warnings\n",
    "warnings.filterwarnings(action='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/doug/DSI Global/Capstone'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "folder_path = \"Classes/\"\n",
    "model_dir = os.listdir(folder_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.DS_Store',\n",
       " 'Passat',\n",
       " 'Tiguan',\n",
       " 'Atlas',\n",
       " 'Golf_Sportwagen_Golf_Alltrack',\n",
       " 'Jetta_Jetta_GLI',\n",
       " 'Golf_GTI_R']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "vw = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".DS_Store\n",
      "Passat\n",
      "Tiguan\n",
      "Atlas\n",
      "Golf_Sportwagen_Golf_Alltrack\n",
      "Jetta_Jetta_GLI\n",
      "Golf_GTI_R\n"
     ]
    }
   ],
   "source": [
    "for model in model_dir:\n",
    "    print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for model in model_dir:\n",
    "    model_list = []\n",
    "    try:\n",
    "        classes = \"Classes/\"\n",
    "        folder_path = classes + model\n",
    "        photo_dir = os.listdir(folder_path)\n",
    "\n",
    "        for photo in photo_dir:\n",
    "            fpath = (folder_path + '/' + photo)\n",
    "#             print(fpath)\n",
    "#             print(photo)\n",
    "            vw = vw.append({'model': model, 'photo': photo, 'folder_path': fpath},ignore_index=True)\n",
    "        \n",
    "            \n",
    "#             print(model)\n",
    "#             print(photo)\n",
    "#             print(folder_path + '/' + photo)\n",
    "    except:\n",
    "        pass\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Golf_GTI_R                       0.227831\n",
       "Tiguan                           0.186903\n",
       "Jetta_Jetta_GLI                  0.173943\n",
       "Golf_Sportwagen_Golf_Alltrack    0.168486\n",
       "Passat                           0.134379\n",
       "Atlas                            0.108458\n",
       "Name: model, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vw['model'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1446                          Classes/Golf_GTI_R/92.3.jpg\n",
       "1447                          Classes/Golf_GTI_R/37.6.jpg\n",
       "1448    Classes/Golf_GTI_R/25.vw_golf_gti_2017_02-1024...\n",
       "1449    Classes/Golf_GTI_R/61.a9dade31c165ae892c217436...\n",
       "1450    Classes/Golf_GTI_R/78.003-2018-volkswagen-golf...\n",
       "1451         Classes/Golf_GTI_R/1.71MBs0r3+mL._UY560_.jpg\n",
       "1452    Classes/Golf_GTI_R/59.used-2018-volkswagen-gol...\n",
       "1453                          Classes/Golf_GTI_R/56.5.jpg\n",
       "1454    Classes/Golf_GTI_R/18.2015-volkswagen-golf_100...\n",
       "1455    Classes/Golf_GTI_R/27.2017-volkswagen-golf-gti...\n",
       "1456    Classes/Golf_GTI_R/12.2016-volkswagen-golf-r-m...\n",
       "1457                          Classes/Golf_GTI_R/52.1.jpg\n",
       "1458                          Classes/Golf_GTI_R/94.7.jpg\n",
       "1459         Classes/Golf_GTI_R/11.CAC50VWC231A021002.jpg\n",
       "1460    Classes/Golf_GTI_R/63.used-2016-volkswagen-gol...\n",
       "1461                          Classes/Golf_GTI_R/89.2.jpg\n",
       "1462    Classes/Golf_GTI_R/22.2018-volkswagen-golf-pla...\n",
       "1463                          Classes/Golf_GTI_R/33.1.jpg\n",
       "1464                          Classes/Golf_GTI_R/76.1.jpg\n",
       "1465                      Classes/Golf_GTI_R/4.274402.jpg\n",
       "Name: folder_path, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vw['folder_path'].tail(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df, valid_df = train_test_split(vw, random_state=69)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>folder_path</th>\n",
       "      <th>model</th>\n",
       "      <th>photo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1156</td>\n",
       "      <td>Classes/Golf_GTI_R/53.https%3A%2F%2Fs3.amazona...</td>\n",
       "      <td>Golf_GTI_R</td>\n",
       "      <td>53.https%3A%2F%2Fs3.amazonaws.com%2Fthe-drive-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>486</td>\n",
       "      <td>Classes/Atlas/82.20968216869.jpg</td>\n",
       "      <td>Atlas</td>\n",
       "      <td>82.20968216869.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>875</td>\n",
       "      <td>Classes/Golf_Sportwagen_Golf_Alltrack/4.2018-v...</td>\n",
       "      <td>Golf_Sportwagen_Golf_Alltrack</td>\n",
       "      <td>4.2018-volkswagen-golf-sportwagen_100598916_h.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1329</td>\n",
       "      <td>Classes/Golf_GTI_R/82.Review-2018-Volkswagen-G...</td>\n",
       "      <td>Golf_GTI_R</td>\n",
       "      <td>82.Review-2018-Volkswagen-Golf-GTI-1.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1343</td>\n",
       "      <td>Classes/Golf_GTI_R/42.c026ec677963ee55d51ecb59...</td>\n",
       "      <td>Golf_GTI_R</td>\n",
       "      <td>42.c026ec677963ee55d51ecb59a8d6bbb1.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>404</td>\n",
       "      <td>Classes/Tiguan/14.1.jpg</td>\n",
       "      <td>Tiguan</td>\n",
       "      <td>14.1.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>439</td>\n",
       "      <td>Classes/Tiguan/55.cc_2015vkw011b_640_0q0q.jpg</td>\n",
       "      <td>Tiguan</td>\n",
       "      <td>55.cc_2015vkw011b_640_0q0q.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>619</td>\n",
       "      <td>Classes/Atlas/62.2019-volkswagen-atlas-1.jpg</td>\n",
       "      <td>Atlas</td>\n",
       "      <td>62.2019-volkswagen-atlas-1.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1227</td>\n",
       "      <td>Classes/Golf_GTI_R/56.2017-volkswagen-golf-gti...</td>\n",
       "      <td>Golf_GTI_R</td>\n",
       "      <td>56.2017-volkswagen-golf-gti-sport-review.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1078</td>\n",
       "      <td>Classes/Jetta_Jetta_GLI/75.77371470c5b7423fa5b...</td>\n",
       "      <td>Jetta_Jetta_GLI</td>\n",
       "      <td>75.77371470c5b7423fa5b0b7f4aa05b035.jpg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1099 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            folder_path  \\\n",
       "1156  Classes/Golf_GTI_R/53.https%3A%2F%2Fs3.amazona...   \n",
       "486                    Classes/Atlas/82.20968216869.jpg   \n",
       "875   Classes/Golf_Sportwagen_Golf_Alltrack/4.2018-v...   \n",
       "1329  Classes/Golf_GTI_R/82.Review-2018-Volkswagen-G...   \n",
       "1343  Classes/Golf_GTI_R/42.c026ec677963ee55d51ecb59...   \n",
       "...                                                 ...   \n",
       "404                             Classes/Tiguan/14.1.jpg   \n",
       "439       Classes/Tiguan/55.cc_2015vkw011b_640_0q0q.jpg   \n",
       "619        Classes/Atlas/62.2019-volkswagen-atlas-1.jpg   \n",
       "1227  Classes/Golf_GTI_R/56.2017-volkswagen-golf-gti...   \n",
       "1078  Classes/Jetta_Jetta_GLI/75.77371470c5b7423fa5b...   \n",
       "\n",
       "                              model  \\\n",
       "1156                     Golf_GTI_R   \n",
       "486                           Atlas   \n",
       "875   Golf_Sportwagen_Golf_Alltrack   \n",
       "1329                     Golf_GTI_R   \n",
       "1343                     Golf_GTI_R   \n",
       "...                             ...   \n",
       "404                          Tiguan   \n",
       "439                          Tiguan   \n",
       "619                           Atlas   \n",
       "1227                     Golf_GTI_R   \n",
       "1078                Jetta_Jetta_GLI   \n",
       "\n",
       "                                                  photo  \n",
       "1156  53.https%3A%2F%2Fs3.amazonaws.com%2Fthe-drive-...  \n",
       "486                                  82.20968216869.jpg  \n",
       "875   4.2018-volkswagen-golf-sportwagen_100598916_h.jpg  \n",
       "1329           82.Review-2018-Volkswagen-Golf-GTI-1.jpg  \n",
       "1343            42.c026ec677963ee55d51ecb59a8d6bbb1.jpg  \n",
       "...                                                 ...  \n",
       "404                                            14.1.jpg  \n",
       "439                      55.cc_2015vkw011b_640_0q0q.jpg  \n",
       "619                      62.2019-volkswagen-atlas-1.jpg  \n",
       "1227       56.2017-volkswagen-golf-gti-sport-review.jpg  \n",
       "1078            75.77371470c5b7423fa5b0b7f4aa05b035.jpg  \n",
       "\n",
       "[1099 rows x 3 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "datagen = ImageDataGenerator(\n",
    "        rescale=1./255,\n",
    "        shear_range=0.2,\n",
    "        zoom_range=0.2,\n",
    "        vertical_flip=True,\n",
    "        horizontal_flip=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# datagen = ImageDataGenerator(\n",
    "#         rotation_range=40,\n",
    "#         width_shift_range=0.2,\n",
    "#         height_shift_range=0.2,\n",
    "#         rescale=1./255,\n",
    "#         shear_range=0.2,\n",
    "#         zoom_range=0.2,\n",
    "#         horizontal_flip=True,\n",
    "#         fill_mode='nearest')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# datagen=ImageDataGenerator(featurewise_center=True,\n",
    "#                            featurewise_std_normalization=True,\n",
    "#                            rotation_range=20,\n",
    "#                            width_shift_range=0.1,\n",
    "#                            height_shift_range=0.1,\n",
    "#                            shear_range=16,\n",
    "#                            zoom_range=[0.9, 1.1],\n",
    "#                            fill_mode=\"constant\",\n",
    "#                            cval=255,\n",
    "#                            horizontal_flip=True,\n",
    "#                            vertical_flip=True,\n",
    "#                            rescale=1./255.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1096 validated image filenames belonging to 6 classes.\n"
     ]
    }
   ],
   "source": [
    "train_generator = datagen.flow_from_dataframe(\n",
    "        dataframe=train_df,\n",
    "        directory=None,\n",
    "        x_col=\"folder_path\",\n",
    "        y_col=\"model\",\n",
    "        target_size=(600, 400),\n",
    "        batch_size=32,\n",
    "        class_mode='categorical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 365 validated image filenames belonging to 6 classes.\n"
     ]
    }
   ],
   "source": [
    "validation_generator = datagen.flow_from_dataframe(\n",
    "        dataframe=valid_df,\n",
    "        directory=None,\n",
    "        x_col=\"folder_path\",\n",
    "        y_col=\"model\",\n",
    "        target_size=(600, 400),\n",
    "        batch_size=32,\n",
    "        class_mode='categorical')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(filters = 6,                # number of filters\n",
    "                     kernel_size = (3,3),       # height/width of filter\n",
    "                     activation = 'relu',        # activation function \n",
    "                     input_shape = (600, 400, 3)))\n",
    "\n",
    "model.add(MaxPooling2D(pool_size = (2,2))) # dimensions of region of pooling\n",
    "\n",
    "model.add(Conv2D(filters = 64,\n",
    "                     kernel_size= (3,3),\n",
    "                     activation= 'relu'))\n",
    "\n",
    "model.add(MaxPooling2D(pool_size= (2,2)))\n",
    "\n",
    "model.add(Flatten())\n",
    "\n",
    "model.add(Dense(128, activation='relu'))\n",
    "\n",
    "model.add(Dropout(0.5))\n",
    "\n",
    "model.add(Dense(6, activation = 'softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "                  optimizer='adam',\n",
    "                  metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "34/34 [==============================] - 339s 10s/step - loss: 6.9272 - acc: 0.1842 - val_loss: 1.7783 - val_acc: 0.1562\n",
      "Epoch 2/50\n",
      "34/34 [==============================] - 282s 8s/step - loss: 1.7687 - acc: 0.2115 - val_loss: 1.7558 - val_acc: 0.1676\n",
      "Epoch 3/50\n",
      "34/34 [==============================] - 282s 8s/step - loss: 1.7576 - acc: 0.2068 - val_loss: 1.7493 - val_acc: 0.1960\n",
      "Epoch 4/50\n",
      "34/34 [==============================] - 281s 8s/step - loss: 1.7538 - acc: 0.2269 - val_loss: 1.7331 - val_acc: 0.2301\n",
      "Epoch 5/50\n",
      "34/34 [==============================] - 282s 8s/step - loss: 1.7494 - acc: 0.2105 - val_loss: 1.7411 - val_acc: 0.2273\n",
      "Epoch 6/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.7492 - acc: 0.2375 - val_loss: 1.7279 - val_acc: 0.2415\n",
      "Epoch 7/50\n",
      "34/34 [==============================] - 275s 8s/step - loss: 1.7264 - acc: 0.2303 - val_loss: 1.7427 - val_acc: 0.2273\n",
      "Epoch 8/50\n",
      "34/34 [==============================] - 274s 8s/step - loss: 1.7337 - acc: 0.2344 - val_loss: 1.7259 - val_acc: 0.2528\n",
      "Epoch 9/50\n",
      "34/34 [==============================] - 293s 9s/step - loss: 1.7291 - acc: 0.2500 - val_loss: 1.7075 - val_acc: 0.2528\n",
      "Epoch 10/50\n",
      "34/34 [==============================] - 292s 9s/step - loss: 1.7288 - acc: 0.2491 - val_loss: 1.6984 - val_acc: 0.3011\n",
      "Epoch 11/50\n",
      "34/34 [==============================] - 278s 8s/step - loss: 1.7010 - acc: 0.2679 - val_loss: 1.6993 - val_acc: 0.2841\n",
      "Epoch 12/50\n",
      "34/34 [==============================] - 277s 8s/step - loss: 1.6928 - acc: 0.2769 - val_loss: 1.6962 - val_acc: 0.2926\n",
      "Epoch 13/50\n",
      "34/34 [==============================] - 279s 8s/step - loss: 1.7003 - acc: 0.2757 - val_loss: 1.6921 - val_acc: 0.3210\n",
      "Epoch 14/50\n",
      "34/34 [==============================] - 272s 8s/step - loss: 1.6601 - acc: 0.3083 - val_loss: 1.6796 - val_acc: 0.3097\n",
      "Epoch 15/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.6603 - acc: 0.3077 - val_loss: 1.6792 - val_acc: 0.3210\n",
      "Epoch 16/50\n",
      "34/34 [==============================] - 282s 8s/step - loss: 1.6288 - acc: 0.3373 - val_loss: 1.6742 - val_acc: 0.3267\n",
      "Epoch 17/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.5838 - acc: 0.3365 - val_loss: 1.6705 - val_acc: 0.3494\n",
      "Epoch 18/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.6162 - acc: 0.3477 - val_loss: 1.6253 - val_acc: 0.3466\n",
      "Epoch 19/50\n",
      "34/34 [==============================] - 280s 8s/step - loss: 1.5643 - acc: 0.3637 - val_loss: 1.6504 - val_acc: 0.3636\n",
      "Epoch 20/50\n",
      "34/34 [==============================] - 281s 8s/step - loss: 1.5664 - acc: 0.3587 - val_loss: 1.5881 - val_acc: 0.3665\n",
      "Epoch 21/50\n",
      "34/34 [==============================] - 277s 8s/step - loss: 1.5325 - acc: 0.3853 - val_loss: 1.5842 - val_acc: 0.3693\n",
      "Epoch 22/50\n",
      "34/34 [==============================] - 286s 8s/step - loss: 1.5050 - acc: 0.4053 - val_loss: 1.5990 - val_acc: 0.3466\n",
      "Epoch 23/50\n",
      "34/34 [==============================] - 281s 8s/step - loss: 1.5194 - acc: 0.3827 - val_loss: 1.5734 - val_acc: 0.3665\n",
      "Epoch 24/50\n",
      "34/34 [==============================] - 293s 9s/step - loss: 1.5008 - acc: 0.4023 - val_loss: 1.5445 - val_acc: 0.3693\n",
      "Epoch 25/50\n",
      "34/34 [==============================] - 282s 8s/step - loss: 1.4868 - acc: 0.3915 - val_loss: 1.5409 - val_acc: 0.4062\n",
      "Epoch 26/50\n",
      "34/34 [==============================] - 275s 8s/step - loss: 1.4941 - acc: 0.3976 - val_loss: 1.5353 - val_acc: 0.3835\n",
      "Epoch 27/50\n",
      "34/34 [==============================] - 275s 8s/step - loss: 1.4340 - acc: 0.4145 - val_loss: 1.5126 - val_acc: 0.3665\n",
      "Epoch 28/50\n",
      "34/34 [==============================] - 270s 8s/step - loss: 1.4374 - acc: 0.4433 - val_loss: 1.5527 - val_acc: 0.3750\n",
      "Epoch 29/50\n",
      "34/34 [==============================] - 280s 8s/step - loss: 1.3860 - acc: 0.4485 - val_loss: 1.4917 - val_acc: 0.3835\n",
      "Epoch 30/50\n",
      "34/34 [==============================] - 278s 8s/step - loss: 1.3739 - acc: 0.4436 - val_loss: 1.4527 - val_acc: 0.3920\n",
      "Epoch 31/50\n",
      "34/34 [==============================] - 272s 8s/step - loss: 1.3883 - acc: 0.4417 - val_loss: 1.4650 - val_acc: 0.4347\n",
      "Epoch 32/50\n",
      "34/34 [==============================] - 279s 8s/step - loss: 1.2829 - acc: 0.4859 - val_loss: 1.4686 - val_acc: 0.3920\n",
      "Epoch 33/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.3626 - acc: 0.4464 - val_loss: 1.4387 - val_acc: 0.4375\n",
      "Epoch 34/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.3441 - acc: 0.4549 - val_loss: 1.4761 - val_acc: 0.3807\n",
      "Epoch 35/50\n",
      "34/34 [==============================] - 290s 9s/step - loss: 1.2878 - acc: 0.4605 - val_loss: 1.4872 - val_acc: 0.4205\n",
      "Epoch 36/50\n",
      "34/34 [==============================] - 269s 8s/step - loss: 1.2783 - acc: 0.4859 - val_loss: 1.4862 - val_acc: 0.4233\n",
      "Epoch 37/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.2715 - acc: 0.4915 - val_loss: 1.4467 - val_acc: 0.4432\n",
      "Epoch 38/50\n",
      "34/34 [==============================] - 273s 8s/step - loss: 1.2699 - acc: 0.4934 - val_loss: 1.4100 - val_acc: 0.4631\n",
      "Epoch 39/50\n",
      "34/34 [==============================] - 274s 8s/step - loss: 1.2522 - acc: 0.5019 - val_loss: 1.4386 - val_acc: 0.4119\n",
      "Epoch 40/50\n",
      "34/34 [==============================] - 270s 8s/step - loss: 1.2202 - acc: 0.5009 - val_loss: 1.4152 - val_acc: 0.4432\n",
      "Epoch 41/50\n",
      "34/34 [==============================] - 280s 8s/step - loss: 1.2311 - acc: 0.5110 - val_loss: 1.4134 - val_acc: 0.4631\n",
      "Epoch 42/50\n",
      "34/34 [==============================] - 273s 8s/step - loss: 1.2050 - acc: 0.5173 - val_loss: 1.3999 - val_acc: 0.4602\n",
      "Epoch 43/50\n",
      "34/34 [==============================] - 280s 8s/step - loss: 1.2274 - acc: 0.5248 - val_loss: 1.4258 - val_acc: 0.4517\n",
      "Epoch 44/50\n",
      "34/34 [==============================] - 271s 8s/step - loss: 1.1992 - acc: 0.5260 - val_loss: 1.3997 - val_acc: 0.4773\n",
      "Epoch 45/50\n",
      "34/34 [==============================] - 273s 8s/step - loss: 1.1527 - acc: 0.5545 - val_loss: 1.3799 - val_acc: 0.4432\n",
      "Epoch 46/50\n",
      "34/34 [==============================] - 273s 8s/step - loss: 1.1107 - acc: 0.5602 - val_loss: 1.4339 - val_acc: 0.4688\n",
      "Epoch 47/50\n",
      "34/34 [==============================] - 272s 8s/step - loss: 1.1260 - acc: 0.5536 - val_loss: 1.4976 - val_acc: 0.4716\n",
      "Epoch 48/50\n",
      "34/34 [==============================] - 285s 8s/step - loss: 1.1245 - acc: 0.5699 - val_loss: 1.3985 - val_acc: 0.4489\n",
      "Epoch 49/50\n",
      "34/34 [==============================] - 275s 8s/step - loss: 1.1450 - acc: 0.5548 - val_loss: 1.4460 - val_acc: 0.4602\n",
      "Epoch 50/50\n",
      "34/34 [==============================] - 276s 8s/step - loss: 1.1260 - acc: 0.5570 - val_loss: 1.4210 - val_acc: 0.4261\n"
     ]
    }
   ],
   "source": [
    "STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
    "STEP_SIZE_VALID=validation_generator.n//validation_generator.batch_size\n",
    "history = model.fit_generator(generator=train_generator,\n",
    "                    steps_per_epoch=STEP_SIZE_TRAIN,\n",
    "                    validation_data=validation_generator,\n",
    "                    validation_steps=STEP_SIZE_VALID,\n",
    "                    epochs=50,\n",
    "                    verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11/11 [==============================] - 31s 3s/step - loss: 1.3880 - acc: 0.4631\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.3880118348381736, 0.4630682]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate_generator(generator=validation_generator,\n",
    "                         steps=STEP_SIZE_VALID,\n",
    "                         verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/doug/DSI Global/Capstone'"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "for unknown_car in model_dir:\n",
    "    try:\n",
    "        classes = \"TEST/\"\n",
    "        folder_path = classes + unknown_car\n",
    "        photo_dir = os.listdir(folder_path)\n",
    "\n",
    "        for photo in photo_dir:\n",
    "            fpath = (folder_path + '/' + photo)\n",
    "            print(fpath)\n",
    "            print(photo)\n",
    "            vw = vw.append({'folder_path': fpath},ignore_index=True)\n",
    "        \n",
    "            \n",
    "#             print(unknown_car)\n",
    "#             print(photo)\n",
    "#             print(folder_path + '/' + photo)\n",
    "    except:\n",
    "        pass\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df = pd.DataFrame()\n",
    "test_photo_dir = os.listdir('TEST/')\n",
    "for photo in test_photo_dir:\n",
    "    fpath = 'TEST/' + photo\n",
    "    test_df = test_df.append({'photo': fpath}, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>photo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>TEST/IMG_4080.jpeg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                photo\n",
       "1  TEST/IMG_4080.jpeg"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "test_df = test_df.drop(test_df.index[0])\n",
    "test_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1 validated image filenames.\n"
     ]
    }
   ],
   "source": [
    "test_datagen=ImageDataGenerator(rescale=1./255.)\n",
    "test_generator=test_datagen.flow_from_dataframe(\n",
    "                                            dataframe=test_df,\n",
    "                                            directory=None,\n",
    "                                            x_col=\"photo\",\n",
    "                                            y_col=None,\n",
    "                                            batch_size=32,\n",
    "                                            shuffle=False,\n",
    "                                            class_mode=None,\n",
    "                                            target_size=(600, 400))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00071314, 0.44956997, 0.46324396, 0.08030397, 0.0016792 ,\n",
       "        0.00448968]], dtype=float32)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict_generator(test_generator) # predictproba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "my_car = model.predict_generator(test_generator) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(my_car,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_class_indices=np.argmax(my_car,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = (train_generator.class_indices)\n",
    "labels = dict((v,k) for k,v in labels.items())\n",
    "predictions = [labels[k] for k in predicted_class_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Atlas',\n",
       " 1: 'Golf_GTI_R',\n",
       " 2: 'Golf_Sportwagen_Golf_Alltrack',\n",
       " 3: 'Jetta_Jetta_GLI',\n",
       " 4: 'Passat',\n",
       " 5: 'Tiguan'}"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Golf_Sportwagen_Golf_Alltrack']"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions # My car is actually a 2016 Golf Sportwagen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "accuracy = history.history['acc']\n",
    "val_accuracy = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(len(accuracy))\n",
    "\n",
    "plt.plot(epochs, accuracy, 'bo', label='Training accuracy')\n",
    "plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
